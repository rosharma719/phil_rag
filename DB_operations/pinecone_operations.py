import os
import logging
import sys
from dotenv import load_dotenv
from pinecone import Pinecone
from sentence_transformers import SentenceTransformer

# Load environment variables
load_dotenv()

# Pinecone Config
PINECONE_API_KEY = os.getenv("PINECONE_API_KEY")
PINECONE_ENVIRONMENT = os.getenv("PINECONE_ENVIRONMENT", "us-east1-gcp")
PINECONE_INDEX_NAME = "belief-embeddings"

# Initialize Pinecone
pc = Pinecone(api_key=PINECONE_API_KEY)
index = pc.Index(PINECONE_INDEX_NAME)

# Logging setup
LOG_FILE = "concept_processing.log"
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(LOG_FILE)
    ]
)
logger = logging.getLogger(__name__)
logger.info("‚úÖ Logging initialized.")

# Load the SAME model used in PostgreSQL embeddings
MODEL_NAME = "BAAI/bge-base-en"  # Same model used in PostgreSQL
model = SentenceTransformer(MODEL_NAME)

def search_pinecone(query_text, top_k=5):
    """
    Searches Pinecone for the closest matches to the query text.
    """
    logger.info(f"üîç Searching for: {query_text}")

    # Generate embedding using the BGE model
    query_embedding = model.encode(query_text).tolist()

    # Ensure the vector is 768D
    if len(query_embedding) != 768:
        logger.error(f"‚ùå Query vector is {len(query_embedding)}D but should be 768D!")
        return None

    # Perform search in Pinecone
    results = index.query(vector=query_embedding, top_k=top_k, include_metadata=True)

    # Log and return results
    if "matches" in results:
        for i, match in enumerate(results["matches"]):
            logger.info(f"\nüîπ Match {i+1} (Score: {match['score']:.4f}):")
            logger.info(f"   ‚û§ ID: {match['id']}")
            logger.info(f"   ‚û§ Metadata: {match.get('metadata', 'No metadata')}")

        return results["matches"]
    
    logger.info("‚ùå No matches found.")
    return None

# Example usage
if __name__ == "__main__":
    query_text = "The preferred context of a system is defined by the set of basis vectors generated by the biorthogonal decomposition of the state. Quantum mechanics: modal interpretations of. This is the actualization rule of BDMI."
    search_pinecone(query_text)
